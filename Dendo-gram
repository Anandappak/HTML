<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dendrogram</title>
  <script src="https://d3js.org/d3.v7.min.js"></script>
</head>
<body>
  <svg width="600" height="400"></svg>

  <script>
    // Sample data (replace with your own)
    const data = {
      name: "Root",
      children: [
        {
          name: "Node 1",
          children: [
            { name: "Leaf 1.1" },
            { name: "Leaf 1.2" }
          ]
        },
        {
          name: "Node 2",
          children: [
            { name: "Leaf 2.1" },
            { name: "Leaf 2.2" }
          ]
        }
      ]
    };

    // Create a tree layout
    const treeLayout = d3.tree().size([400, 300]);

    // Generate hierarchy from data
    const root = d3.hierarchy(data);

    // Compute the layout
    treeLayout(root);

    // Append SVG
    const svg = d3.select("svg");

    // Draw links
    svg.selectAll("path.link")
      .data(root.links())
      .enter().append("path")
      .attr("class", "link")
      .attr("d", d3.linkHorizontal()
        .x(d => d.y)
        .y(d => d.x));

    // Draw nodes
    svg.selectAll("g.node")
      .data(root.descendants())
      .enter().append("g")
      .attr("class", "node")
      .attr("transform", d => `translate(${d.y},${d.x})`)
      .append("circle")
      .attr("r", 4);

    // Draw node labels
    svg.selectAll("g.node")
      .append("text")
      .attr("dx", 12)
      .attr("dy", 4)
      .text(d => d.data.name);
  </script>
</body>
</html>


pop model showing
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dendrogram Popup Example</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>

<button id="openPopupBtn">Open Popup</button>

<div id="popup" class="popup">
  <div class="popup-content">
    <span class="close" onclick="closePopup()">&times;</span>
    <h2>Dendrogram</h2>
    <div id="dendrogram"></div>
  </div>
</div>

<script src="script.js"></script>
</body>
</html>


css 
.popup {
  display: none;
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.5);
}

.popup-content {
  background-color: #fefefe;
  margin: 10% auto;
  padding: 20px;
  border: 1px solid #888;
  width: 80%;
  max-width: 600px;
}

.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}

js
// Function to open the popup
function openPopup() {
  var popup = document.getElementById("popup");
  popup.style.display = "block";

  // Call function to render dendrogram here
  renderDendrogram();
}

// Function to close the popup
function closePopup() {
  var popup = document.getElementById("popup");
  popup.style.display = "none";
}

// Function to render the dendrogram
function renderDendrogram() {
  // Your dendrogram rendering code here
  // You can use libraries like D3.js or Plotly.js to generate the dendrogram
  // Example: 
  // const dendrogramData = { ... };
  // const dendrogramContainer = document.getElementById("dendrogram");
  // dendrogramContainer.innerHTML = ""; // Clear existing content
  // Code to generate dendrogram using D3.js or Plotly.js
}

// Event listener for opening the popup
document.getElementById("openPopupBtn").addEventListener("click", openPopup);


ex2 
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dendrogram Popup</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>

  <!-- Button to trigger modal -->
  <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#dendrogramModal">
    Open Dendrogram
  </button>

  <!-- Modal -->
  <div class="modal fade" id="dendrogramModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLongTitle">Dendrogram</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <!-- Dendrogram SVG will be appended here -->
          <svg id="dendrogramSvg" width="600" height="400"></svg>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <!-- JavaScript libraries -->
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

  <script>
    // Sample data (replace with your own)
    const data = {
      name: "Root",
      children: [
        {
          name: "Node 1",
          children: [
            { name: "Leaf 1.1" },
            { name: "Leaf 1.2" }
          ]
        },
        {
          name: "Node 2",
          children: [
            { name: "Leaf 2.1" },
            { name: "Leaf 2.2" }
          ]
        }
      ]
    };

    // Function to generate dendrogram
    function generateDendrogram() {
      const treeLayout = d3.tree().size([400, 300]);
      const root = d3.hierarchy(data);
      treeLayout(root);

      const svg = d3.select("#dendrogramSvg");

      svg.selectAll("*").remove();

      svg.selectAll("path.link")
        .data(root.links())
        .enter().append("path")
        .attr("class", "link")
        .attr("d", d3.linkHorizontal()
          .x(d => d.y)
          .y(d => d.x));

      svg.selectAll("g.node")
        .data(root.descendants())
        .enter().append("g")
        .attr("class", "node")
        .attr("transform", d => `translate(${d.y},${d.x})`)
        .append("circle")
        .attr("r", 4);

      svg.selectAll("g.node")
        .append("text")
        .attr("dx", 12)
        .attr("dy", 4)
        .text(d => d.data.name);
    }

    // Trigger generation of dendrogram when modal is shown
    $('#dendrogramModal').on('shown.bs.modal', function (e) {
      generateDendrogram();
    });
  </script>
</body>
</html>


ex3
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dendrogram in Popup Modal</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <script src="https://d3js.org/d3.v7.min.js"></script>
</head>
<body>
  <!-- Button trigger modal -->
  <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#dendrogramModal">
    Open Dendrogram
  </button>

  <!-- Modal -->
  <div class="modal fade" id="dendrogramModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLabel">Dendrogram</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <!-- Dendrogram SVG will be appended here -->
          <svg id="dendrogramSvg" width="600" height="400"></svg>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Sample data (replace with your own)
    const data = {
      name: "Root",
      children: [
        {
          name: "Node 1",
          children: [
            { name: "Leaf 1.1" },
            { name: "Leaf 1.2" }
          ]
        },
        {
          name: "Node 2",
          children: [
            { name: "Leaf 2.1" },
            { name: "Leaf 2.2" }
          ]
        }
      ]
    };

    // Create a tree layout
    const treeLayout = d3.tree().size([400, 300]);

    // Generate hierarchy from data
    const root = d3.hierarchy(data);

    // Compute the layout
    treeLayout(root);

    // Append SVG to modal body
    const svg = d3.select("#dendrogramSvg");

    // Draw links
    svg.selectAll("path.link")
      .data(root.links())
      .enter().append("path")
      .attr("class", "link")
      .attr("d", d3.linkHorizontal()
        .x(d => d.y)
        .y(d => d.x));

    // Draw nodes
    svg.selectAll("g.node")
      .data(root.descendants())
      .enter().append("g")
      .attr("class", "node")
      .attr("transform", d => `translate(${d.y},${d.x})`)
      .append("circle")
      .attr("r", 4);

    // Draw node labels
    svg.selectAll("g.node")
      .append("text")
      .attr("dx", 12)
      .attr("dy", 4)
      .text(d => d.data.name);
  </script>

  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>

